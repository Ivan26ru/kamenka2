<krpano >
	
	<include url="../setting_FP.xml" />
	<include url="%FIRSTXML%/plugins/showtext.xml" />
	
	
	 <!-- limitview="fullrange" -->
	<view fov="120"  maxpixelzoom="1.0" limitview="fullrange"/>
	
	<control  zoomtocursor = "true" zoomoutcursor = "true"  /> 
	
	
	<!-- <layer name="t2" keep="true" type="text" align="top"  y="30" x="50"  html="set radar  heading  30" onclick="set(layer[radarEFR].heading, 30); trace(curent_scene)" /> -->
		
	
	<!-- стиль планов из основного тура - удаляем, т.к. они в одном файле грузятся и в туре и во флат -->
	<style name="flpl_pano"  type="container"  enabled="false" visible="false" onloaded="removelayer(*name)"  />  
	<style name="cont_fp" type="container"  enabled="false" visible="false" onloaded="removelayer(*name)"  />  
	<style name="cont_fp2"  type="container"  enabled="false" visible="false" onloaded="removelayer(*name)"  />  
	
	<!-- calc(plugin[radarEFR].scale, (1-view.fov) * 0.5); 
			onviewchange - выполняется только один раз при старте js(console.log(get(timertick),'>>> onviewchange flat')); -->
	<events name="radar_fp" keep="true"
				onviewchange="if(!startpoint, 
											set(startpoint, true); 
											onstartjs(); 											 
										);"
				onwheel="calc(plugin[radarEFR].scale, (1-view.fov) * 0.5); "
	/> 
	
	<!-- krp - основной тур, передача значений и создание действий -->
	<action name="onstartjs" autorun="onstart"  type="Javascript" ><![CDATA[
		var krp = document.getElementById('krpanoSWFObject');
		krp = krp.get("global");
		 
		krpano.add_point = function(pano){ krp.call( "add_pit_flat(" + pano + ");" ); }
		krpano.rotate_pano = function(h){  krp.call( "if(!edit_flpl, set(vneshn, true); set(view.hlookat," + h + "));" ); }
		krpano.stoprad = function() {  krp.call("set(vneshn, false);"); }
		krpano.radartosetpreal = function() {  krp.call("radartosetpreal(" + krpano.radarfp.hlookat + ");"); }
		krpano.openplan = function(pl) {  krp.call("show_plan_fp(" + pl + ");"); }
		krpano.yesscene = function(ysc) {  krp.call( "set(yes_curentsc," + ysc + ")" ); }
		
		krpano.head_rad = function(headR) {  krp.call("head_radar(" + headR + ");"); } 
		
		krpano.loadscv = function(sc, hl, vl, fv) {  krp.call("load_sc_v(" + sc + ',' + hl + ',' + vl + ',' + fv + ");"); } 
		
		krpano.add_point_v = function() {  krp.call("add_pit_v_flpl()") } 
		
		krpano.call("onstart_fp()");
		
		  
 
		//krpano.test = function() {  krp.call("save_plugin.test()"); } 	
		
		if(krp.editor_on == 'true'){
			krpano.call("includexml(%FIRSTXML%/FloorPlan/editor/editor_flat.xml)"); 
			//console.log('editor_flat.xml' );
		}
		
	
 	]]></action>
	
	 <!-- пано загрузилось onloadcomplete  удалить лишние точки, включить радар, если есть точки с планом -->
	<action name="onstart_fp" >
		
		delayedcall(0.5,		 												<!-- удаляем в этом пано лишние точки -->
			forall(hotspot,h, 	<!-- jscall(calc('console.log("хотспоты в плане  name='+ h.name   +  '")')); -->
			
				if(h.plan AND h.plan !== name_pano AND h.name !== 'pointradar2' AND h.name !== 'pointradar' , 
					removehotspot(get(h.name) );					<!--  h.visible = false   removehotspot(*h.name)  глюк -предупреждение lookto-->
				
						<!-- jscall(calc('console.log("пано загрузилось onloadcomplete     h.plan=' + h.plan + '   name='+ h.name +  '   name_pano='+    name_pano  +  '")')); -->
					,
					if(	h.plan == name_pano, 				
						on_off_hotspot(pointradar, true);			<!-- если есть точки с планом - включить хс радара -->
						set(layer[radarEFR].enabled, true);			<!-- если есть точки с планом - включить радар -->
						<!-- on_off_hotspot(pointradar2, true); -->  
						set(hotspot[pointradar2].visible, true);
					)
				);		
			);
			curent_scene(*chek_pl ,*curent_scene);
		);
		set(hotspot[pointradar2].url,  (plan_settings.url_plan + 'iconPoint/' + plan_settings.point_url_3) );
		copy(hotspot[pointradar2].scale,  pit_scale  );
		set(rotatkonus, false);
		
		//delayedcall(1, tween(view.fov, 10);  change_scale();  );
 	</action>
	

	<action name="on_off_hotspot" scope="local" args="naml, stat">
		copy(hotspot[*naml].visible, stat);
		copy(hotspot[*naml].enabled, stat);   
	</action>		
	
	

	<!-- ************     РАДАР    ****************    -->
	
	<!-- значение устанавливается из плагина радара ! -->
	<radarfp hlookat="0" hfov="100" stagescale="1" />	
	
 	<!-- radar   -->
	<plugin name="radarEFR" keep="true"  url.html5="%FIRSTXML%/FloorPlan/xml/radarFP2.js" align="center" edge="center" zorder="51" x="0" y="0" parent="hotspot[pointradar]"
	       scale="0.2" fillalpha="0.5" fillcolor="0x7F5F3F" linewidth="1" linecolor="0xE0E0A0" linealpha="0.5" alpha="1" enabled="false"
		   heading="0" headingoffset="0" editmode="true" ondown="ondown_radar_fp();" onup=""   onloaded="copy(heading, headingRD); copy(scale, plan_settings.radar_scale)" />
	
	<!-- hotspot parent  для радара -->
	<hotspot name="pointradar" keep="true" type="text" edge="center"  distorted="false" width="1" height="1" scale="1" bgalpha="0.0" alpha="1" visible="false" enabled="false" zoom="false"  zorder="58"   />
			
	<!--  передвигающаяся точка для радара   -->
	<hotspot name="pointradar2"  keep="true" style="pointflpl"  zorder="60" enabled="false"  visible="false"   renderer="css3d" onclick=" " onloaded="" plan="false" />
	
	
	<!-- Из тура передача вращения радара  -->
	<action name="rotate_radar_fp" scope="local" args="hlookat, hfov"> trace(hlookat);
			copy(radarfp.hlookat, hlookat);
			copy(radarfp.hfov, hfov );
			rotate_radar_line()
	</action>
	
	
	<!-- Нажали на радар -->
	<action name="ondown_radar_fp"  >  
		asyncloop(pressed,
			if(!edit_flpl, 
				rotate_pano(*radarfp.hlookat); <!-- вращать панораму -->
				,
				copy(temp, radarfp.hlookat);
				rotate_radar_line();
			);	
			, 
			stoprad();
			if(edit_flpl, radartosetpreal(*radarfp.hlookat) );<!-- в режиме редактирования сделать поправку преалинг, как отпустили радар -->
		); 
	</action>
	
	
	
	
	<!-- ************     ТОЧКА    ****************    -->
			
	<!-- Щелчек по точке -->
	<action name="point_click" scope="local" args="ath, atv, linkedsc" >
		tween(hotspot[pointradar].ath, *ath, 0.7, easeInOutQuad);
		tween(hotspot[pointradar].atv, *atv,  0.7, easeInOutQuad);
		tween(hotspot[pointradar2].ath, *ath, 0.7, easeInOutQuad);
		tween(hotspot[pointradar2].atv, *atv,  0.7, easeInOutQuad);
	</action>
	
	<!-- сменить картинку точки вида при клике -->
	<action name="point_v_click" scope="local" args="icon_2" >
		set(caller.onloaded,);
		 calc(caller.url,  plan_settings.url_plan + 'iconPoint/' + icon_2 );
	</action>
	
	<action name="change_scale" scope="local" > 
		for(set(i,0), i LT hotspot.count, inc(i), 
			copy(hs, hotspot[*i]);  
			if(hs.style ==  pointflpl, 
				copy(hs.scale, pit_scale); 
				<!-- jscall(calc('console.log("scale ' + hs.name + '   в  плане ' + curent_plan + '")')); -->
			);		
		);
 	</action>
	
	
	<!-- ************     SCENE    ****************    -->
	
	<!-- вызов при загрузке сцены в туре.  определение наличия соотв. точки и смещение к ней. Переключение плана, если не соответствует -->
	<action name="curent_scene" scope="local" args="chek_pl, namsc"  > 
			copy(curent_scene, namsc);     
			
			<!-- jscall(calc('console.log("сцена загрузилась ' + namsc + '  plan:' + chek_pl  +  '")')); -->
			set(global.yessc, false);
			for(set(i,0), i LT hotspot.count, inc(i), 
				copy(hs, hotspot[*i]);   
				if(tolower(hs.name) == tolower(namsc) AND hs.visible AND hs.plan,  	<!-- есть в точке сцена. нижний регистр -->
					copy(i, hotspot.count );												<!-- остановиь цикл -->
					on_off_hotspot(pointradar, true);									<!--  выключить радар -->
					set(hotspot[pointradar2].visible, true);		
					openplan(*hs.plan); 													<!-- Показать план  -->
					setcurentpl(*hs.plan);												<!-- установить curent_plan в туре   -->
					delayedcall(1, set_icon_2());										<!-- поменять иконку точки  --> 
					
					//jscall(calc('console.log("есть в точке сцена: ' + hs.name + '  plan:' + hs.plan + '  текущая сцена' + namsc +  '")'));					 
						
					lookto( *hs.ath, *hs.atv, *view.fov , smooth(2,2,2), easeInOutQuad );		<!-- позиционировать план к точке -->
					point_click(*hs.ath, *hs.atv);											<!--  двигаем радар на точку -->
					copy(global.curent_pit, hs.name);
					
					//jscall(calc('console.log("текущая точка: ' + curent_pit+  '")'));
					
					set(yessc, true);
					,
					on_off_hotspot(pointradar, false);									<!--  выключить радар -->	
					set(hotspot[pointradar2].visible, false);										<!--  выключить перемещающуюся точку  -->	
					//jscall(calc('console.log("документ ' + yessc +  '")'));
				);
			);
			
			if(yessc, yesscene(*yessc));  <!-- если есть сцена в плане, установить yes_curentsc в туре - true -->
 	</action>
	
	<!-- сменить иконку точки плана при загрузке сцены   -->
 	<action name="set_icon_2" type="Javascript" ><![CDATA[
		var krp = document.getElementById('krpanoSWFObject');
		krp = krp.get("global");
		
		krpano.call('set(hotspot[*curent_pit].onloaded, ); set(hotspot[*curent_pit].url,' +  krp.plan_settings.url_plan +  'iconPoint/' + krp.plan_settings.point_url_2 + ')');
			 
 	]]></action>
	
	<!-- клик по точке плана вызывает  loadscene в туре (прописано в стиле)  -->
 	<action name="load_scene_tour" type="Javascript" ><![CDATA[
		var krp = document.getElementById('krpanoSWFObject');
		krp = krp.get("global");
		
		krp.call( "loadscene(" + args[1] + ", null, " + krp.plan_settings.loadsc_flags  + "," +  krp.plan_settings.loadscene_blend + "); set(curent_point," + args[2] + ");" );
		
		//console.log('клик по точке     ' + krp.plan_settings.loadscene_blend);
			 
 	]]></action>
	
	
	<!-- Вызов при загрузке сцены . установить curent_plan в туре . Показать название в списке планов и в редакторе(если включен) 	-->
 	<action name="setcurentpl" type="Javascript" ><![CDATA[
		var krp = document.getElementById('krpanoSWFObject');
		krp = krp.get("global");
		//console.log(args[1]);
		krp.call( "getToFlatPl(" + args[1] + ");" );
		 	 
 	]]></action>
 
 

	
</krpano>